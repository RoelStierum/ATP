### Verantwoording Functioneel Programmeren Principes in de Code

#### Hogere-orde functies:
In de code hebben we het concept van hogere-orde functies toegepast door een timingdecorator te implementeren. Deze decorator, `measure_execution_time`, accepteert een functie als argument en voegt timingfunctionaliteit toe zonder de oorspronkelijke code van de functie te wijzigen. Bijvoorbeeld:

```python
@measure_execution_time
def some_function():
    # ... oorspronkelijke code ...
```

Dit maakt het mogelijk om de uitvoeringstijd van verschillende functies te meten zonder de functies zelf aan te passen.

#### Pure functies:
In onze implementatie hebben we gestreefd naar pure functies, met name in de bindingsklassen zoals `BME280`, `OPT3002`, en `Servo`. Deze klassen bevatten methoden die alleen afhankelijk zijn van hun invoer (sensorwaarden, bijvoorbeeld) en geen bijwerkingen hebben buiten het retourneren van resultaten. Hierdoor wordt de code eenvoudiger te begrijpen en te onderhouden.

#### Functiecompositie:
Functiecompositie is subtiel toegepast in de hoofdlogica van de `main.py`. Hoewel dit niet expliciet wordt geïllustreerd met een aparte functiecompositie, wordt de hoofdlogica gemoduleerd in kleinere, afzonderlijke stappen. Bijvoorbeeld:

```python
current_temperature = sensors['bme280'].read_temperature()
current_light_intensity = sensors['opt3002'].read_light_intensity()

if current_temperature > goal_temperature:
    sensors['servo'].open_ventilation()
else:
    sensors['servo'].close_ventilation()

if current_light_intensity < goal_light_intensity:
    status_led.turn_on()
else:
    status_led.turn_off()
```

Hier worden afzonderlijke stappen gecombineerd om het gedrag van het systeem te definiëren.

#### Verantwoording:
- **Hogere-orde functies**: De timingdecorator is ingevoerd om de performantie van verschillende functies te meten, waardoor prestatieanalyse mogelijk is zonder de oorspronkelijke functies te wijzigen.

- **Pure functies**: De bindingsklassen zijn ontworpen als pure functies, wat resulteert in beter begrijpelijke, testbare en onderhoudbare code.

- **Functiecompositie**: De hoofdlogica van de `main.py` is modulair opgebouwd, waardoor verschillende stappen eenvoudig kunnen worden aangepast zonder de gehele logica te verstoren.

Deze functionele programmeerprincipes zijn geïmplementeerd om de leesbaarheid, onderhoudbaarheid en modulariteit van de code te verbeteren. Ze bieden een gestructureerde aanpak voor het ontwerpen van het regelsysteem.
